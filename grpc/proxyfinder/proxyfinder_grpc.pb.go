// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.0
// source: grpc/proto/proxyfinder.proto

package proxyfinder

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProxyFinderClient is the client API for ProxyFinder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProxyFinderClient interface {
	FindProxyServer(ctx context.Context, in *FindProxyServerRequest, opts ...grpc.CallOption) (*FindProxyServerResponse, error)
}

type proxyFinderClient struct {
	cc grpc.ClientConnInterface
}

func NewProxyFinderClient(cc grpc.ClientConnInterface) ProxyFinderClient {
	return &proxyFinderClient{cc}
}

func (c *proxyFinderClient) FindProxyServer(ctx context.Context, in *FindProxyServerRequest, opts ...grpc.CallOption) (*FindProxyServerResponse, error) {
	out := new(FindProxyServerResponse)
	err := c.cc.Invoke(ctx, "/grpc.proxyfinder.ProxyFinder/FindProxyServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProxyFinderServer is the server API for ProxyFinder service.
// All implementations must embed UnimplementedProxyFinderServer
// for forward compatibility
type ProxyFinderServer interface {
	FindProxyServer(context.Context, *FindProxyServerRequest) (*FindProxyServerResponse, error)
	mustEmbedUnimplementedProxyFinderServer()
}

// UnimplementedProxyFinderServer must be embedded to have forward compatible implementations.
type UnimplementedProxyFinderServer struct {
}

func (UnimplementedProxyFinderServer) FindProxyServer(context.Context, *FindProxyServerRequest) (*FindProxyServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindProxyServer not implemented")
}
func (UnimplementedProxyFinderServer) mustEmbedUnimplementedProxyFinderServer() {}

// UnsafeProxyFinderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProxyFinderServer will
// result in compilation errors.
type UnsafeProxyFinderServer interface {
	mustEmbedUnimplementedProxyFinderServer()
}

func RegisterProxyFinderServer(s grpc.ServiceRegistrar, srv ProxyFinderServer) {
	s.RegisterService(&ProxyFinder_ServiceDesc, srv)
}

func _ProxyFinder_FindProxyServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindProxyServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyFinderServer).FindProxyServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.proxyfinder.ProxyFinder/FindProxyServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyFinderServer).FindProxyServer(ctx, req.(*FindProxyServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProxyFinder_ServiceDesc is the grpc.ServiceDesc for ProxyFinder service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProxyFinder_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.proxyfinder.ProxyFinder",
	HandlerType: (*ProxyFinderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindProxyServer",
			Handler:    _ProxyFinder_FindProxyServer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/proto/proxyfinder.proto",
}
